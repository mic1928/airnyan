import random

def cat_reaction(owner_emotion, owner_excitement):
    """
    飼い主の感情と興奮度に基づいて、猫の行動をグラデーションとランダム性を持たせてシミュレートする関数

    Args:
        owner_emotion: 飼い主の感情の度合い (0: 負、100: 正)
        owner_excitement: 飼い主の興奮度 (0: 低い、100: 高い)

    Returns:
        string: 猫の行動を表す文字列
    """

    # 感情と興奮度をそれぞれ0-5の範囲の浮動小数点数に変換(段階数を5段階に増加)
    emotion_level = owner_emotion / 20
    excitement_level = owner_excitement / 20

    # 猫の行動レパートリー (段階数に合わせて行動パターンも追加)
    reactions = {
        (0, 0): ["飼い主に寄り添って静かにする", "飼い主の膝の上で丸くなる"],
        (0, 1): ["飼い主に顔をこすりつける", "静かに喉を鳴らす"],
        (0, 2): ["小さく鳴いて訴える", "飼い主の足元に体をこすりつける"],
        (0, 3): ["低い声で鳴きながら警戒する", "飼い主の手を避ける"],
        (0, 4): ["毛を逆立てて怒る", "「シャー」と鳴きながら威嚇する"],
        (0, 5): ["猫パンチをする", "飛び上がって逃げる"],
        (1, 0): ["近くに座って眠る", "あくびをして寝転がる"],
        (1, 1): ["しっぽをゆっくりと振る", "床でゴロゴロする"],
        (1, 2): ["足元にすり寄ってくる", "甘えた声で鳴く"],
        (1, 3): ["頭突きをしてくる", "喉をゴロゴロ鳴らす"],
        (1, 4): ["飼い主の手を避ける", "落ち着きなく歩き回る"],
        (1, 5): ["飼い主の体に軽く触れる", "警戒しながら鳴く"],
        (2, 0): ["膝の上に乗ってきて寝る", "ゴロゴロと喉を鳴らす"],
        (2, 1): ["顔をすり寄せてくる", "飼い主の顔に頭突きをする"],
        (2, 2): ["飼い主と一緒に遊びを求める", "楽しそうにジャンプする"],
        (2, 3): ["喉を鳴らしながら追いかけっこをする", "飼い主に飛びつく"],
        (2, 4): ["興奮して飼い主に飛びつく", "高いところに飛び乗る"],
        (2, 5): ["しっぽを大きく振る", "ジャンプして飼い主に近づく"],
        (3, 0): ["飼い主の腕の中で眠る", "飼い主の手を舐める"],
        (3, 1): ["喉を鳴らしながら見つめる", "飼い主のそばを離れない"],
        (3, 2): ["高い声で鳴いてアピールする", "飼い主に飛びつく"],
        (3, 3): ["興奮して走り回る", "飼い主とじゃれ合う"],
        (3, 4): ["ジャンプして飼い主に近づく", "鳴きながら飼い主にまとわりつく"],
        (3, 5): ["興奮しすぎて飛びかかる", "高い声で鳴いて走り回る"],
        (4, 0): ["お腹を見せて甘える", "飼い主の手を舐める"],
        (4, 1): ["ゆっくりと瞬きをする", "おねだりする"],
        (4, 2): ["楽しそうに走り回る", "飼い主の足元に体をこすりつける"],
        (4, 3): ["喜びを全身で表現する", "興奮して飼い主に飛びつく"],
        (4, 4): ["大きな声で鳴きながら注意を引こうとする", "飼い主にまとわりつく"],
        (4, 5): ["過剰に反応して飼い主に飛びつく", "興奮して走り回る"],
        (5, 0): ["飼い主のそばでゴロゴロする", "飼い主の膝の上でくつろぐ"],
        (5, 1): ["飼い主の足元にすり寄る", "日向ぼっこをする"],
        (5, 2): ["飼い主に甘える", "飼い主の手をなめる"],
        (5, 3): ["飼い主の体に触れて安心する", "ゴロゴロと喉を鳴らす"],
        (5, 4): ["戸惑ったように鳴く", "体を震わせる"],
        (5, 5): ["飼い主に背を向ける", "パニック状態で鳴きながら走り回る"],
    }


    # 感情と興奮度に最も近い行動グループを選択
    emotion_key = min(int(emotion_level), 5)
    excitement_key = min(int(excitement_level), 5)
    base_reactions = reactions[(emotion_key, excitement_key)]

    # 隣接する感情レベルの行動も考慮 (範囲外参照を回避)
    adjacent_reactions = []
    for i in range(max(emotion_key - 1, 0), min(emotion_key + 2, 5)):
        for j in range(max(excitement_key - 1, 0), min(excitement_key + 2, 5)):
            adjacent_reactions += reactions[(i, j)]

    # 全ての候補となる行動をリストにまとめる
    all_reactions = base_reactions + adjacent_reactions

    # 重複を削除してランダムに選択
    reaction = random.choice(list(set(all_reactions)))

    return reaction


if __name__ == "__main__":
    # 使用例
    emotion = 70
    excitement = 30
    reaction = cat_reaction(emotion, excitement)
    print(f"飼い主の感情: {emotion}, 興奮度: {excitement} → 猫の反応: {reaction}")